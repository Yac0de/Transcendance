diff --git a/srcs/frontend/Dockerfile.prod b/srcs/frontend/Dockerfile.prod
index ca4b950..1629cb7 100644
--- a/srcs/frontend/Dockerfile.prod
+++ b/srcs/frontend/Dockerfile.prod
@@ -8,8 +8,6 @@ COPY package*.json ./
 
 # Install dependencies
 RUN npm install
-RUN npm install pinia
-RUN npm install socket.io-client
 
 # Copy project files
 COPY . .
diff --git a/srcs/frontend/src/components/Auth/AuthForm.vue b/srcs/frontend/src/components/Auth/AuthForm.vue
index b8feec1..baa9501 100644
--- a/srcs/frontend/src/components/Auth/AuthForm.vue
+++ b/srcs/frontend/src/components/Auth/AuthForm.vue
@@ -5,7 +5,7 @@
       <form @submit.prevent="onSubmit">
         <div v-for="(field, index) in fields" :key="index">
           <label :for="field.label">{{ field.label }}</label>
-          <input :type="field.type" :id="field.label" v-model="field.model.value" :required="field.required"
+          <input :type="field.type" :id="field.label" v-model="field.model" :required="field.required"
             :maxlength="field.maxlength" />
         </div>
         <div v-if="successMessage" class="alert alert-success">{{ successMessage }}</div>
diff --git a/srcs/frontend/src/components/Auth/SignInForm.vue b/srcs/frontend/src/components/Auth/SignInForm.vue
index 49b318f..02bd1a4 100644
--- a/srcs/frontend/src/components/Auth/SignInForm.vue
+++ b/srcs/frontend/src/components/Auth/SignInForm.vue
@@ -20,10 +20,10 @@ const router = useRouter();
 const userStore = useUserStore();
 
 // Form fields
-const fields: Field[] = [
+const fields = ref<Field[]>([
   { label: 'Nickname', model: nickname, type: 'text', required: true, maxlength: 20 },
   { label: 'Password', model: password, type: 'password', required: true, maxlength: 50 },
-];
+]);
 
 const handleSubmit = async () => {
   // Field validation
@@ -44,10 +44,7 @@ const handleSubmit = async () => {
     await api.auth.signin({ nickname: nickname.value, password: password.value });
     await userStore.fetchUser();
 
-    const userId: string | null = userStore.getId;
-    if (userId) {
-      userStore.setWebSocketService(userId);
-    }
+    userStore.setWebSocketService(userStore.getId);
     console.log('Sign in successful', userStore.getNickname);
 
     successMessage.value = 'Sign in successful!';
diff --git a/srcs/frontend/src/components/Auth/SignUpForm.vue b/srcs/frontend/src/components/Auth/SignUpForm.vue
index 1bda9db..4179d7d 100644
--- a/srcs/frontend/src/components/Auth/SignUpForm.vue
+++ b/srcs/frontend/src/components/Auth/SignUpForm.vue
@@ -19,11 +19,11 @@ const successMessage = ref('');
 const router = useRouter();
 
 // Form fields
-const fields: Field[] = [
+const fields = ref<Field[]>([
   { label: 'Nickname', model: nickname, type: 'text', required: true, maxlength: 20 },
   { label: 'Password', model: password, type: 'password', required: true, maxlength: 50 },
   { label: 'Confirm Password', model: confirmPassword, type: 'password', required: true, maxlength: 50 },
-];
+]);
 
 const handleSubmit = async () => {
   // Field validation
diff --git a/srcs/frontend/src/components/User/Account/Account.vue b/srcs/frontend/src/components/User/Account/Account.vue
index b9b9877..955fa17 100644
--- a/srcs/frontend/src/components/User/Account/Account.vue
+++ b/srcs/frontend/src/components/User/Account/Account.vue
@@ -40,7 +40,7 @@ const isEditing = ref(false)
 const isDeleting = ref(false)
 const isViewingStats = ref(false)
 const deleted = ref(false)
-const userToDisplay = ref<UserData>({ id: '', nickname: '', displayname: '', avatar: '' })
+const userToDisplay = ref<UserData>({ nickname: '', displayname: '', avatar: '' })
 const successMessage = ref('')
 const errorMessage = ref('')
 const router = useRouter()
@@ -65,19 +65,17 @@ const checkOwnProfile = async () => {
 
 const fetchUserData = async (nickname: string) => {
   resetMessages()
-  console.log("YEAH YEAH");
   userExists.value = true
 
   try {
-    let userData: UserData | null
+    let userData: UserData
 
     if (nickname === userStore.getNickname) {
       userData = {
-        id: userStore.getId ?? '',
-        nickname: userStore.getNickname ?? '',
-        displayname: userStore.getDisplayName ?? '',
-        avatar: userStore.getAvatarPath ?? ''
-      };
+        nickname: userStore.getNickname,
+        displayname: userStore.getDisplayName,
+        avatar: userStore.getAvatarPath
+      }
     } else {
       userData = await api.user.getProfileData(nickname)
       if (!userData) {
@@ -128,7 +126,7 @@ const saveProfile = async (updatedUser: UserData, newAvatarFile: File | null) =>
   try {
     await api.user.updateUserProfile(updatedUser, newAvatarFile)
     await userStore.fetchUser()
-    userToDisplay.value = { ...updatedUser, avatar: userStore.getAvatarPath ?? '' }
+    userToDisplay.value = { ...updatedUser, avatar: userStore.getAvatarPath }
     successMessage.value = 'Profile updated successfully'
   } catch (error: any) {
     const errorResponse = await error.response?.json()
diff --git a/srcs/frontend/src/components/User/Chat/Chat.vue b/srcs/frontend/src/components/User/Chat/Chat.vue
index 98b4980..23d06a8 100644
--- a/srcs/frontend/src/components/User/Chat/Chat.vue
+++ b/srcs/frontend/src/components/User/Chat/Chat.vue
@@ -7,7 +7,7 @@
 				<FriendList :friends="friends" :currentFriendId="currentFriendId"
 					@select-friend="selectFriend" />
 				<ChatDiscussion :currentFriend="currentFriend" :messages="currentConversation"
-					:userId="userStore.getId ?? ''" @send-message="sendMessage" />
+					:userId="userStore.getId" @send-message="sendMessage" />
 			</div>
 			<button @click="toggleChatInterface" class="close-button">
 				<i class="fas fa-times"></i>
@@ -51,7 +51,6 @@ const toggleChatInterface = () => {
 };
 
 const selectFriend = async (friendId: string) => {
-	console.log("SF = ", typeof (friendId));
 	currentFriendId.value = friendId;
 	await loadFriendDiscussion(friendId);
 };
@@ -80,10 +79,10 @@ const loadFriendDiscussion = async (friendId: string) => {
 
 const sendMessage = (message: string) => {
 	if (message.trim() && currentFriendId.value) {
-		if (userStore.getWebSocketService?.isConnected()) {
-			userStore.getWebSocketService?.sendMessage(
+		if (userStore.getWebSocketService.isConnected()) {
+			userStore.getWebSocketService.sendMessage(
 				message,
-				userStore.getId ?? '',
+				userStore.getId,
 				currentFriendId.value
 			);
 		} else {
@@ -97,7 +96,7 @@ const setupChatMessageHandler = () => {
 		return;
 	}
 
-	userStore.getWebSocketService.setMessageHandler<ChatMessage>('CHAT', (message: ChatMessage) => {
+	userStore.getWebSocketService.setMessageHandler('CHAT', (message: ChatMessage) => {
 		const messageToPush: Message = {
 			content: message.Data,
 			senderId: message.SenderID,
@@ -120,17 +119,14 @@ const fetchFriendList = async () => {
 	try {
 		const fetchedFriends = await api.friendlist.getFriendList();
 		if (fetchedFriends) {
-			friends.value = fetchedFriends.map(friend => ({
-				...friend,
-				id: String(friend.id)  // Convert number to string here
-			}));
+			friends.value = fetchedFriends;
 		}
-		console.log(typeof (friends.value[0].id));
 	} catch (error) {
 		console.error('Failed to fetch friend list', error);
 	}
 };
 
+
 onMounted(() => {
 	fetchFriendList();
 });
diff --git a/srcs/frontend/src/components/User/Chat/ChatDiscussion.vue b/srcs/frontend/src/components/User/Chat/ChatDiscussion.vue
index c982d20..b0d6b6c 100644
--- a/srcs/frontend/src/components/User/Chat/ChatDiscussion.vue
+++ b/srcs/frontend/src/components/User/Chat/ChatDiscussion.vue
@@ -36,7 +36,7 @@ const scrollToBottom = () => {
 const props = defineProps<{
 	currentFriend: Friend | undefined;
 	messages: Message[];
-	userId: string;
+	userId: number;
 }>();
 
 const emit = defineEmits<{
diff --git a/srcs/frontend/src/components/User/Chat/ChatFriendList.vue b/srcs/frontend/src/components/User/Chat/ChatFriendList.vue
index 42e0a1b..7ae520f 100644
--- a/srcs/frontend/src/components/User/Chat/ChatFriendList.vue
+++ b/srcs/frontend/src/components/User/Chat/ChatFriendList.vue
@@ -4,7 +4,7 @@
 			<ul>
 				<li v-for="friend in friends" :key="friend.id"
 					:class="['friend-item', { 'active': currentFriendId === friend.id }]"
-					@click="$emit('select-friend', String(friend.id))">
+					@click="$emit('select-friend', friend.id)">
 					{{ friend.nickname }}
 				</li>
 			</ul>
@@ -23,7 +23,6 @@ defineProps<{
 defineEmits<{
 	(e: 'select-friend', friendId: string): void;
 }>();
-
 </script>
 
 <style scoped>
diff --git a/srcs/frontend/src/components/User/Friend/FriendMenu.vue b/srcs/frontend/src/components/User/Friend/FriendMenu.vue
index 0cdb298..82d04a4 100644
--- a/srcs/frontend/src/components/User/Friend/FriendMenu.vue
+++ b/srcs/frontend/src/components/User/Friend/FriendMenu.vue
@@ -27,7 +27,7 @@ import AddFriendPopover from './AddFriendPopover.vue';
 import FriendRequestPopover from './FriendRequestPopover.vue';
 import FriendMenuActions from './FriendMenuActions.vue';
 import api from '../../../services/api';
-import { Friend } from '../../../types/models';
+import { FriendRequest, Friend } from '../../../types/models';
 
 const showFriendIcon = ref(true);
 const showFriendMenu = ref(false);
@@ -36,7 +36,7 @@ const showAddFriend = ref(false);
 const showFriendRequests = ref(false);
 const newFriendNickname = ref('');
 const friends = ref<Friend[]>([]);
-const friendRequests = ref<Friend[]>([]);
+const friendRequests = ref<FriendRequest[]>([]);
 const friendsLoaded = ref(false);
 const friendRequestsLoaded = ref(false);
 const errorMessage = ref('');
diff --git a/srcs/frontend/src/services/authService.ts b/srcs/frontend/src/services/authService.ts
index 42f0530..15fec00 100644
--- a/srcs/frontend/src/services/authService.ts
+++ b/srcs/frontend/src/services/authService.ts
@@ -1,6 +1,7 @@
 import { apiRequest } from './apiUtils';
+import userService from './userService';
 import { useUserStore } from '../stores/user';
-import { Credentials } from '../types/models';
+import { Credentials } from '../../../types/models';
 
 export default {
     async signin(credentials: Credentials): Promise<any> {
diff --git a/srcs/frontend/src/services/chatService.ts b/srcs/frontend/src/services/chatService.ts
index ac785a2..7ebff8e 100644
--- a/srcs/frontend/src/services/chatService.ts
+++ b/srcs/frontend/src/services/chatService.ts
@@ -1,9 +1,9 @@
 import { apiRequest } from './apiUtils';
 import { WebSocketService } from './websocketService';
-import { ChatHistory } from '../types/models';
+import { ChatMessage } from '../types/websocket';
 
 export default {
-    async getChatHistory(friendId: string): Promise<ChatHistory | null> {
+    async getChatHistory(friendId: string): Promise<Message | null> {
         try {
             return await apiRequest(`/conversation/${friendId}`, { credentials: "include" });
         } catch (error: unknown) {
diff --git a/srcs/frontend/src/services/friendlistService.ts b/srcs/frontend/src/services/friendlistService.ts
index 69f6581..ca93dc5 100644
--- a/srcs/frontend/src/services/friendlistService.ts
+++ b/srcs/frontend/src/services/friendlistService.ts
@@ -1,5 +1,5 @@
 import { apiRequest } from './apiUtils';
-import { Friend } from '../types/models';
+import { Friend } from '../../../types/models';
 
 export default {
     async getFriendList(): Promise<Friend[]> {
diff --git a/srcs/frontend/src/services/userService.ts b/srcs/frontend/src/services/userService.ts
index 545024e..6eb697f 100644
--- a/srcs/frontend/src/services/userService.ts
+++ b/srcs/frontend/src/services/userService.ts
@@ -1,5 +1,5 @@
 import { apiRequest, API_BASE_URL } from './apiUtils';
-import { UserData } from '../types/models';
+import { UserData } from '../../../types/models';
 
 export default {
     async getUserData(): Promise<UserData | null> {
diff --git a/srcs/frontend/src/services/websocketService.ts b/srcs/frontend/src/services/websocketService.ts
index ca514cd..aaf5068 100644
--- a/srcs/frontend/src/services/websocketService.ts
+++ b/srcs/frontend/src/services/websocketService.ts
@@ -1,16 +1,16 @@
-import { ChatMessage, OnlineUsersMessage, UserStatusMessage } from '../types/websocket';
+import type { ReturnType } from 'typescript';
+import { BaseMessage, ChatMessage, OnlineUsersMessage, UserStatusMessage } from '../types/websocket';
 import { useOnlineUsersStore } from '../stores/onlineUsers';
 
-type MessageHandler<T> = (message: T) => void;
-type MessageHandlers = {
-    [key: string]: MessageHandler<ChatMessage | OnlineUsersMessage | UserStatusMessage>;
-};
-
 export class WebSocketService {
-    public ws: WebSocket | null = null;
-    public clientId: string;
-    public onlineUsersStore: ReturnType<typeof useOnlineUsersStore>;
-    public messageHandlers: MessageHandlers = {};
+    private ws: WebSocket | null = null;
+    private clientId: string;
+    private onlineUsersStore: ReturnType<typeof useOnlineUsersStore>;
+
+    private messageHandlers = {
+    'CHAT': (message: ChatMessage) => {
+        }
+    }
 
     constructor(clientId: string, store: ReturnType<typeof useOnlineUsersStore>) {
         this.clientId = clientId;
@@ -19,21 +19,21 @@ export class WebSocketService {
     }
 
     public initMessageHandlers(): void {
-        this.setMessageHandler<OnlineUsersMessage> ('ONLINE_USERS', (message: OnlineUsersMessage) => {
+        this.setMessageHandler('ONLINE_USERS', (message: OnlineUsersMessage) => {
             this.onlineUsersStore.setOnlineUsers(message.UsersOnline);
         });
 
-        this.setMessageHandler<UserStatusMessage>('USER_DISCONNECTED', (message: UserStatusMessage) => {
+        this.setMessageHandler('USER_DISCONNECTED', (message: UserStatusMessage) => {
             this.onlineUsersStore.removeOnlineUser(message.User);
         });
 
-        this.setMessageHandler<UserStatusMessage>('NEW_CONNECTION', (message: UserStatusMessage) => {
+        this.setMessageHandler('NEW_CONNECTION', (message: UserStatusMessage) => {
             this.onlineUsersStore.addOnlineUser(message.User);
         });
     }
 
-    public setMessageHandler<T>(type: string, handler: MessageHandler<T>): void {
-        this.messageHandlers[type] = handler as MessageHandler<ChatMessage | OnlineUsersMessage | UserStatusMessage>;
+    public setMessageHandler(type: string, handler: (message: any) => void): void {
+        this.messageHandlers[type] = handler;
     }
 
     public connect(): void {
@@ -43,7 +43,7 @@ export class WebSocketService {
             this.ws = new WebSocket(url);
             this.ws.onopen = () => {
                 console.log('Websocket connected!');
-                console.log('WS ready state: ', this.ws?.readyState);
+                console.log('WS ready state: ', this.ws.readyState);
             };
             this.ws.onclose = (event) => {
                 console.log('Disconnected to Websocket!, ', event.reason);
@@ -89,3 +89,4 @@ export class WebSocketService {
         return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
     }
 }
+
diff --git a/srcs/frontend/src/stores/user.ts b/srcs/frontend/src/stores/user.ts
index a046058..6c3a902 100644
--- a/srcs/frontend/src/stores/user.ts
+++ b/srcs/frontend/src/stores/user.ts
@@ -2,10 +2,9 @@ import { defineStore } from 'pinia'
 import api from '../services/api'
 import { WebSocketService } from '../services/websocketService';
 import { useOnlineUsersStore } from '../stores/onlineUsers';
-import { UserState, UserData } from '../types/models';
 
 export const useUserStore = defineStore('user', {
-  state: (): UserState => ({
+  state: () => ({
     id: null,
     nickname: null,
     displayname: null,
@@ -13,22 +12,22 @@ export const useUserStore = defineStore('user', {
     webSocketService: null, 
   }),
   getters: {
-    getId: (state): string | null => state.id,
-    getNickname: (state): string | null => state.nickname,
-    getDisplayName: (state): string | null => state.displayname,
-    getAvatarPath: (state): string | null => state.avatar,
-    isSignedIn: (state): boolean => !!state.id,
-    getWebSocketService: (state): InstanceType<typeof WebSocketService> | null => state.webSocketService
+    getId: (state) => state.id,
+    getNickname: (state) => state.nickname,
+    getDisplayName: (state) => state.displayname,
+    getAvatarPath: (state) => state.avatar,
+    isSignedIn: (state) => !!state.id,
+    getWebSocketService: (state) => state.webSocketService
   },
   actions: {
-    setUser(userData: UserData) {
+    setUser(userData) {
       this.$patch({
         id: userData.id,
         nickname: userData.nickname,
         displayname: userData.displayname,
         avatar: userData.avatar
       });
-      const storageData: UserData = {
+      const storageData = {
         id: userData.id,
         nickname: userData.nickname,
         displayname: userData.displayname,
@@ -37,16 +36,16 @@ export const useUserStore = defineStore('user', {
       localStorage.setItem('userData', JSON.stringify(storageData))
     },
 
-    setWebSocketService(userId: string) {
+    setWebSocketService(userId) {
       const store = useOnlineUsersStore();
-      const webSocketService: WebSocketService = new WebSocketService(userId, store);
+      const webSocketService = new WebSocketService(userId, store);
       webSocketService.connect();
       this.webSocketService = webSocketService;
     },
 
     async fetchUser() {
       try {
-        const userData: UserData | null = await api.user.getUserData()
+        const userData = await api.user.getUserData()
         if (userData) {
           const currentWS = this.webSocketService;
           
@@ -66,7 +65,7 @@ export const useUserStore = defineStore('user', {
 
     clearUser() {
       if (this.webSocketService) {
-        this.webSocketService?.disconnect();
+        this.webSocketService.disconnect();
         this.webSocketService = null;
       }
       this.$reset()
@@ -76,7 +75,7 @@ export const useUserStore = defineStore('user', {
     loadUserFromStorage() {
       const storedUser = localStorage.getItem('userData')
       if (storedUser) {
-        const userData: UserData = JSON.parse(storedUser)
+        const userData = JSON.parse(storedUser)
         this.$patch(userData)
 
         const store = useOnlineUsersStore();
diff --git a/srcs/frontend/src/types/models.ts b/srcs/frontend/src/types/models.ts
index 95bfff1..587cd23 100644
--- a/srcs/frontend/src/types/models.ts
+++ b/srcs/frontend/src/types/models.ts
@@ -1,21 +1,11 @@
-import { Ref } from 'vue';
-import { WebSocketService } from '../services/websocketService';
+import { ref } from 'vue';
 
 export interface UserData {
-  id: string;
   nickname: string;
   displayname: string;
   avatar: string;
 }
 
-export interface UserState {
-  id: string | null;
-  nickname: string | null;
-  displayname: string | null;
-  avatar: string | null;
-  webSocketService: InstanceType<typeof WebSocketService> | null, 
-}
-
 export interface FriendRequest {
   id: string;
   nickname: string;
@@ -45,7 +35,7 @@ export interface Field {
 	label: string;
 	model: Ref<string>;
 	type: string;
-	required: boolean;
+	required: bool;
 	maxlength: number;
 }
 
